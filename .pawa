folder:
  - source: js/src
    target: 
      python: codewave-py/codewave_core
  - source: js/src/cmds
    target: 
      python: codewave-py/codewave_core/cmds
  - source: test/js/src
    target: 
      python: codewave-py/test
  - source: test/spec/src
    target: 
      python: codewave-py/test
  # - source: codewave-py
    # target: 
      # coffee: js/src
syntax:
  coffee:
    comment: '#'
    translations:
      python:
        group:
          - struct.string.1 /'/ skip:/\\'/  /'/
          - struct.string.2 /"/ skip:/\\"/  /"/
          - struct.parentheses ( skip:struct.string )
          - struct.brackets /[/ skip:struct.string /]/
          - struct.curly { skip:struct.string }
        replace:
          - word true  True
          - word false False
          - word null  None
          - Math.max   max
          - Math.min   min
          - /\bof\b/   in
          - Codewave.util.BoxHelper   box_helper.BoxHelper
          - Codewave.util             util
          - Codewave.Command.cmds     command.cmds
          - Codewave.EditCmdProp.     edit_cmd_prop.
          - Codewave.Command(         command.Command(
          - Codewave.logger.log       logger.log
          - Codewave.CmdFinder        cmd_finder.CmdFinder
          - Codewave.Context          context.Context
          - Codewave.Process          process.Process
          - Codewave.CmdInstance      cmd_instance.CmdInstance
          - Codewave.PositionedCmdInstance positioned_cmd_instance.PositionedCmdInstance
          - Codewave.TextParser       text_parser.TextParser
          - Codewave.storage          storage
          - Codewave.ClosingPromp     closing_promp.ClosingPromp
          - Codewave.Command.initCmds command.initCmds
          - Codewave.Command.loadCmds command.loadCmds
          - cmdInitialisers.push(     cmdInitialisers.add(
          - /Codewave.(\w*)Detector/  detector.$1Detector
          - Codewave.Command.saveCmd( command.saveCmd(
          - |
            'throw "Not Implemented"' 'raise NotImplementedError'
          - |
            'new Codewave(' codewave_core.codewave.Codewave(
          - |
            'new RegExp('  're.compile('
          - ++ +=1
          - -- -=1
          - /class (@[\w\.]+\.)?(\w+)$/               'class $2():'
          - /class (@[\w\.]+\.)?(\w+)\s*extends\s*(?:@?Codewave.)?([\w.]+)$/ 'class $2($3):'
          - /([\w\]])\?(\s|:)/                        '$1 is not None$2'
          - /\s!(\w|@)/                               ' not $1'
          - /^(\s*)\[([\s\w,._@]*)\]\s*=\s*\[(.*)\]$/ '$1$2 = $3'
          - /^(\s*)\[([\s\w,._@]*)\]\s*=/             '$1$2 ='
          - /this\[(\w*)\]\s*=\s*(.*)/                'setattr(self,$1,$2)'
          - /\sconstructor:\s*->/                     ' def __init__(self):'
          - |
            /\sconstructor:\s*\(([^)]*)\)\s*->/       ' def __init__(self, ${sarg1}):
              ${sarg2} = ${sarg3}' 
            alter:$1,sarg1,/@/,'' 
            alter:$1,sarg2,/($|,)\s*[^@]\w*(\s*=\s*[^,]*)|\s*=\s*[^,]+/,''
            alter:${sarg2},sarg3,/@/,'' 
          - /\s([^\s]+):\s*->/                        ' def $1(self):'
          - /\s([^\s]+):\s*\(([^)]*)\)\s*->/          ' def $1(self,$2):'
          - /([^\s]+)\s*=\s*(?:\(([^)]*)\))?\s*->/    'def $1($2):'
          - /^(\s*)for\W(.*,.*)\Wof\W(.*)$/           '$1for $2 in $3.items():'
          - /^(\s*(?:if|while|for)\W.*[^:])$/         '$1:'
          - /^(\s*)unless\s*([\w@]*)\?\s*$/           '$1if $2 is None:'
          - /^(\s*)unless(\W.*[^:])$/                 '$1if not$2:'
          - /^(\s*)else if(\W.*[^:]):?$/              '$1elif$2:'
          - /^(\s*else)$/                             '$1:'
          # for the following, the actual match should be /^(\s*)(\w*) = \2\.concat\((.*)\)$/
          - /^(\s*)(\w*) = \w*\.concat\((.*)\)$/      '$1$2 += $3' 
          - /\[([^\]]*)\.\.([^\]]*)\]/                'range($1,$2\)'
          - /(\w*).indexOf\((.*)\) (?:>|!=) -1/       '$2 in $1'
          - /(\w*).indexOf\((.*)\) == -1/             '$2 not in $1'
          - /if\s(.*)\sthen\s(.*)\selse\s(.*)/        '$2 if $1 else $3' reparse
          - /\((.*) for (.*) in (.*) when (.*)\)/     '[$1 for $2 in $3 if $4]'
          - /typeof\s*([@.\w]*)\s*==\s*['"]string['"]/    'isinstance($1, str)'
          - /typeof\s*(\w*)\s*==\s*['"]function['"]/  "hasattr($1, '__call__')"
          - /([@\w.\[\]]*)\.length/                   'len($1)'
          - /\.shift\(/                               '.pop(0'
          - /\.push\(/                                '.append('
          - .toLowerCase(                             .lower(
          - /([\w.]+)\.join\(([^)]+)\)/               '$2.join($1)'
          - /@(\w)/                                   'self.$1'
          - /#\{([\w.@]+)\}/                          '"+$1+"'
          - word this  self
          - /\bnew\s/  ''
        replace_parts:
          - | 
            .substring( [ 
            skip:struct 
            , :
            skip:struct 
            ) ]
  python:
    comment: '#'
    ext: py
    translations:
      coffee:
        replace:
          - |
            ' is not None'    ?
          - word True  true
          - word False false
          - word None  null
          - word elif  'else if'
          - self. @
          - __init__ constructor
          - word self this
          - |
            /def (\w+)\(self,\s*([^)]*)\)\s*:/   '$1: ($2) ->'
          - |
            /def (\w+)\(self\)\s*:/              '$1: ->'
          - |
            /^def\s(\w+)\(\s*([^)]+)\)\s*:/      '$1 = ($2) ->'
          - |
            /^def\s(\w+)\(\)\s*:/                '$1 = ->'
          - /(\W(?:if|while|else|for|elif)(\W.*)?):$/ $1
          - /(for\W.*\W)in(\W.*)\.items\(\)/     $1of$2
          - /setattr\((.*),(.*),(.*)\)$/         '$1[$2] = $3'
          - /\.append\(/                         '.push('
          - /if\s(.*)\sis\sNone$/                'unless $1?'
          - /class\s+(\w+)\(command.BaseCommand\):$/  'class $1 extends @Codewave.BaseCommand'
          - /class\s+(\w+)\(\):$/                'class @Codewave.$1'
          - /class\s+(\w+)\((.+)\):$/            'class @Codewave.$1 extends $2'