folder:
  - source: js/src
    target: 
      python: codewave_py
  - source: codewave_py
    target: 
      coffee: js/src
syntax:
  coffee:
    comment: '#'
    translations:
      python:
        group:
          - struct.string.1 /'/ skip:/\\'/  /'/
          - struct.string.2 /"/ skip:/\\"/  /"/
          - struct.parentheses ( skip:struct.string )
          - struct.brackets /[/ skip:struct.string /]/
          - struct.curly { skip:struct.string }
        replace:
          - word true  True
          - word false False
          - word null  None
          - ++ +=1
          - /class (@[\w\.]+\.)?(\w+)(\(\))?$/        'class $2():'
          - /@(\w)/                                   'self.$1'
          - /\sconstructor:\s*->/                     ' def __init__(self):'
          - /\sconstructor:\s*\(([^)]*)\)\s*->/       ' def __init__(self,$1):'
          - /\s([^\s]+):\s*->/                        ' def $1(self):'
          - /\s([^\s]+):\s*\(([^)]*)\)\s*->/          ' def $1(self,$2):'
          - /^(\s*(?:#\s)?(?:if|while|for)\W.*[^:])$/ '$1:'
          - /^(\s*(?:#\s)?)unless(\W.*[^:])$/         '$1if not$2:'
          - /^(\s*(?:#\s)?)else if(\W.*[^:]):?$/      '$1elif$2:'
          - /^(\s*(?:#\s)?else)$/                     '$1:'
          - /\[([^\]]*)\.\.([^\]]*)\]/                'range($1,$2\)'
          - /([\w.]*)\.length/                        'len($1)'
          - /\.shift\(/                               '.pop(0'
          - /\.push\(/                                '.append('
          - /([\w.]*)\.join\(([^)]+)\)/               '$2.join($1)'
          - /#\{([\w.]+)\}/                           "'+$1+'"
        replace_parts:
          - | 
            .substring( [ 
            skip:struct 
            , :
            skip:struct 
            ) ]
  python:
    comment: '#'
    ext: py
    translations:
      coffee:
        replace:
          - |
            ' is not None'    ?
          - word True  true
          - word False false
          - word None  null
          - word elif  'else if'
          - self. @
          - __init__ constructor
          - word self this
          - |
            /def (\w+)\(self,\s*([^)]*)\)\s*:/   '$1: ($2) ->'
          - |
            /def (\w+)\(self\)\s*:/              '$1: ->'
          - |
            /^def\s(\w+)\(\s*([^)]+)\)\s*:/      '$1 = ($2) ->'
          - |
            /^def\s(\w+)\(\)\s*:/                '$1 = ->'
          - /(\W(?:if|while|else|for|elif)(\W.*)?):$/ $1
          - /(for\W.*\W)in(\W.*)\.items\(\)/     $1of$2
          - /setattr\((.*),(.*),(.*)\)$/         '$1[$2] = $3'
          - /\.append\(/                         '.push('
          - /if\s(.*)\sis\sNone$/                'unless $1?'
          - /class\s+(\w+)\(command.BaseCommand\):$/  'class $1 extends @Codewave.BaseCommand'
          - /class\s+(\w+)\(\):$/                'class @Codewave.$1'
          - /class\s+(\w+)\((.+)\):$/            'class @Codewave.$1 extends $2'