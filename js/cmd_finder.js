// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Codewave.CmdFinder = (function() {
    function CmdFinder(names, options) {
      var defaults, key, val;
      if (typeof spaces === 'string') {
        names = [names];
      }
      defaults = {
        parent: null,
        namespaces: [],
        root: Codewave.Command.cmds,
        mustExecute: true,
        useDetectors: true,
        useFallbacks: true,
        instance: null,
        codewave: null
      };
      this.names = names;
      this.parent = options['parent'];
      for (key in defaults) {
        val = defaults[key];
        if (__indexOf.call(options, key) >= 0) {
          this[key] = options[key];
        } else if ((typeof parent !== "undefined" && parent !== null) && key !== 'parent') {
          this[key] = parent[key];
        } else {
          self[key] = val;
        }
      }
    }

    CmdFinder.prototype.find = function() {
      this.triggerDetectors();
      this.cmd = this.findIn(this.root);
      return this.cmd;
    };

    CmdFinder.prototype.getPosibilities = function() {
      var path;
      this.triggerDetectors();
      path = list(this.path);
      return this.findPosibilitiesIn(this.root, path);
    };

    CmdFinder.prototype.getNamesWithPaths = function() {
      var name, paths, rest, space, _i, _len, _ref, _ref1, _ref2;
      paths = {};
      _ref = this.names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        _ref1 = Codewave.util.splitFirstNamespace(name), space = _ref1[0], rest = _ref1[1];
        if ((space != null) && (_ref2 = !space, __indexOf.call(this.namespaces, _ref2) >= 0)) {
          if (__indexOf.call(paths, space) < 0) {
            paths[space] = [];
          }
          paths[space].push(rest);
        }
      }
      return paths;
    };

    CmdFinder.prototype.applySpaceOnNames = function(space) {
      var rest, _ref;
      _ref = Codewave.util.splitFirstNamespace(name), space = _ref[0], rest = _ref[1];
      return this.names.map(function(name) {
        var cur_rest, cur_space, _ref1;
        _ref1 = Codewave.util.splitFirstNamespace(name), cur_space = _ref1[0], cur_rest = _ref1[1];
        if ((cur_space != null) && cur_space === space) {
          name = cur_rest;
        }
        if (space != null) {
          name = rest + ':' + name;
        }
        return name;
      });
    };

    CmdFinder.prototype.getDirectNames = function() {
      var n;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.names;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          if (n.indexOf(":") === -1) {
            _results.push(n);
          }
        }
        return _results;
      }).call(this);
    };

    CmdFinder.prototype.triggerDetectors = function() {
      var cmd, detector, posibilities, res, _i, _len, _results;
      if (this.useDetectors) {
        this.useDetectors = false;
        posibilities = new Codewave.CmdFinder(this.namespaces, {
          parent: this,
          mustExecute: false,
          useFallbacks: false
        }).findPosibilities();
        _results = [];
        for (_i = 0, _len = posibilities.length; _i < _len; _i++) {
          cmd = posibilities[_i];
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = cmd.detectors;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              detector = _ref[_j];
              res = detector.detect(this);
              _results1.push(this.addNamespaces(res));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    CmdFinder.prototype.addNamespaces = function(spaces) {
      var space, _i, _len, _results;
      if (spaces) {
        if (typeof spaces === 'string') {
          spaces = [spaces];
        }
        _results = [];
        for (_i = 0, _len = spaces.length; _i < _len; _i++) {
          space = spaces[_i];
          if (__indexOf.call(this.namespaces, space) < 0) {
            _results.push(this.namespaces.append(space));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    CmdFinder.prototype.findIn = function(cmd, path) {
      var best;
      if (path == null) {
        path = null;
      }
      if (cmd == null) {
        return null;
      }
      best = this.bestInPosibilities(this.findPosibilities());
      if (best != null) {
        return best;
      }
    };

    CmdFinder.prototype.findPosibilities = function() {
      var direct, fallback, name, names, next, nspc, nspcName, nspcPath, posibilities, space, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (this.root == null) {
        return [];
      }
      this.root.init();
      posibilities = [];
      _ref = this.getNamesWithPaths();
      for (names = _i = 0, _len = _ref.length; _i < _len; names = ++_i) {
        space = _ref[names];
        next = this.root.getCmd(space);
        if (next != null) {
          posibilities = Codewave.util.merge(posibilities, new Codewave.CmdFinder(names, {
            parent: this,
            root: next
          }).findPosibilities());
        }
      }
      _ref1 = this.namespaces;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        nspc = _ref1[_j];
        nspcPath = nspc.split(":");
        nspcName = nspcPath.pop(0);
        next = this.root.getCmd(nspcName);
        if (next != null) {
          posibilities = Codewave.util.merge(posibilities, new Codewave.CmdFinder(this.applySpaceOnNames(nspc), {
            parent: this,
            root: next
          }).findPosibilities());
        }
      }
      _ref2 = this.getDirectNames();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        name = _ref2[_k];
        direct = this.root.getCmd(name);
        if (this.cmdIsValid(direct)) {
          posibilities.push(direct);
        }
      }
      if (this.useFallbacks) {
        fallback = this.root.getCmd('fallback');
        if (this.cmdIsValid(fallback)) {
          posibilities.push(fallback);
        }
      }
      return posibilities;
    };

    CmdFinder.prototype.cmdIsValid = function(cmd) {
      if (cmd == null) {
        return false;
      }
      cmd.init();
      return !this.mustExecute || cmd.isExecutable();
    };

    CmdFinder.prototype.bestInPosibilities = function(poss) {
      var best, bestScore, p, score, _i, _len;
      if (poss.length > 0) {
        best = null;
        bestScore = null;
        for (_i = 0, _len = poss.length; _i < _len; _i++) {
          p = poss[_i];
          score = p.depth;
          if (p.name === 'fallback') {
            score -= 1000;
          }
          if (best === null || score >= bestScore) {
            bestScore = score;
            best = p;
          }
        }
        return best;
      }
    };

    return CmdFinder;

  })();

}).call(this);

//# sourceMappingURL=cmd_finder.js.map
