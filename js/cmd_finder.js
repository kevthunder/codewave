// Generated by CoffeeScript 1.9.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Codewave.CmdFinder = (function() {
    function CmdFinder(names, options) {
      var defaults, key, val;
      if (typeof names === 'string') {
        names = [names];
      }
      defaults = {
        parent: null,
        namespaces: [],
        parentContext: null,
        context: null,
        root: Codewave.Command.cmds,
        mustExecute: true,
        useDetectors: true,
        useFallbacks: true,
        instance: null,
        codewave: null
      };
      this.names = names;
      this.parent = options['parent'];
      for (key in defaults) {
        val = defaults[key];
        if (key in options) {
          this[key] = options[key];
        } else if ((this.parent != null) && key !== 'parent') {
          this[key] = this.parent[key];
        } else {
          this[key] = val;
        }
      }
      if (this.context == null) {
        this.context = new Codewave.Context(this.codewave);
      }
      if (this.parentContext != null) {
        this.context.parent = this.parentContext;
      }
      if (this.namespaces != null) {
        this.context.addNamespaces(this.namespaces);
      }
    }

    CmdFinder.prototype.find = function() {
      this.triggerDetectors();
      this.cmd = this.findIn(this.root);
      return this.cmd;
    };

    CmdFinder.prototype.getPosibilities = function() {
      var path;
      this.triggerDetectors();
      path = list(this.path);
      return this.findPosibilitiesIn(this.root, path);
    };

    CmdFinder.prototype.getNamesWithPaths = function() {
      var name, paths, rest, space, _i, _len, _ref, _ref1;
      paths = {};
      _ref = this.names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        _ref1 = Codewave.util.splitFirstNamespace(name), space = _ref1[0], rest = _ref1[1];
        if ((space != null) && !(__indexOf.call(this.context.getNameSpaces(), space) >= 0)) {
          if (!(space in paths)) {
            paths[space] = [];
          }
          paths[space].push(rest);
        }
      }
      return paths;
    };

    CmdFinder.prototype.applySpaceOnNames = function(namespace) {
      var rest, space, _ref;
      _ref = Codewave.util.splitFirstNamespace(namespace, true), space = _ref[0], rest = _ref[1];
      return this.names.map(function(name) {
        var cur_rest, cur_space, _ref1;
        _ref1 = Codewave.util.splitFirstNamespace(name), cur_space = _ref1[0], cur_rest = _ref1[1];
        if ((cur_space != null) && cur_space === space) {
          name = cur_rest;
        }
        if (rest != null) {
          name = rest + ':' + name;
        }
        return name;
      });
    };

    CmdFinder.prototype.getDirectNames = function() {
      var n;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.names;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          if (n.indexOf(":") === -1) {
            _results.push(n);
          }
        }
        return _results;
      }).call(this);
    };

    CmdFinder.prototype.triggerDetectors = function() {
      var cmd, detector, i, posibilities, res, _i, _len, _ref, _results;
      if (this.useDetectors) {
        this.useDetectors = false;
        posibilities = new Codewave.CmdFinder(this.context.getNameSpaces(), {
          parent: this,
          mustExecute: false,
          useFallbacks: false
        }).findPosibilities();
        i = 0;
        _results = [];
        while (i < posibilities.length) {
          cmd = posibilities[i];
          _ref = cmd.detectors;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            detector = _ref[_i];
            res = detector.detect(this);
            if (res != null) {
              this.context.addNamespaces(res);
              posibilities = posibilities.concat(new Codewave.CmdFinder(res, {
                parent: this,
                mustExecute: false,
                useFallbacks: false
              }).findPosibilities());
            }
          }
          _results.push(i++);
        }
        return _results;
      }
    };

    CmdFinder.prototype.findIn = function(cmd, path) {
      var best;
      if (path == null) {
        path = null;
      }
      if (cmd == null) {
        return null;
      }
      best = this.bestInPosibilities(this.findPosibilities());
      if (best != null) {
        return best;
      }
    };

    CmdFinder.prototype.findPosibilities = function() {
      var direct, fallback, name, names, next, nspc, nspcName, posibilities, rest, space, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      if (this.root == null) {
        return [];
      }
      this.root.init();
      posibilities = [];
      _ref = this.getNamesWithPaths();
      for (space in _ref) {
        names = _ref[space];
        next = this.root.getCmd(space);
        if (next != null) {
          posibilities = posibilities.concat(new Codewave.CmdFinder(names, {
            parent: this,
            root: next
          }).findPosibilities());
        }
      }
      _ref1 = this.context.getNameSpaces();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        nspc = _ref1[_i];
        _ref2 = Codewave.util.splitFirstNamespace(nspc, true), nspcName = _ref2[0], rest = _ref2[1];
        next = this.root.getCmd(nspcName);
        if (next != null) {
          posibilities = posibilities.concat(new Codewave.CmdFinder(this.applySpaceOnNames(nspc), {
            parent: this,
            root: next
          }).findPosibilities());
        }
      }
      _ref3 = this.getDirectNames();
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        name = _ref3[_j];
        direct = this.root.getCmd(name);
        if (this.cmdIsValid(direct)) {
          posibilities.push(direct);
        }
      }
      if (this.useFallbacks) {
        fallback = this.root.getCmd('fallback');
        if (this.cmdIsValid(fallback)) {
          posibilities.push(fallback);
        }
      }
      return posibilities;
    };

    CmdFinder.prototype.cmdIsValid = function(cmd) {
      if (cmd == null) {
        return false;
      }
      cmd.init();
      return !this.mustExecute || cmd.isExecutable();
    };

    CmdFinder.prototype.bestInPosibilities = function(poss) {
      var best, bestScore, p, score, _i, _len;
      if (poss.length > 0) {
        best = null;
        bestScore = null;
        for (_i = 0, _len = poss.length; _i < _len; _i++) {
          p = poss[_i];
          score = p.depth;
          if (p.name === 'fallback') {
            score -= 1000;
          }
          if (best === null || score >= bestScore) {
            bestScore = score;
            best = p;
          }
        }
        return best;
      }
    };

    return CmdFinder;

  })();

}).call(this);

//# sourceMappingURL=cmd_finder.js.map
