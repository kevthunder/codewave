// Generated by CoffeeScript 1.9.0
(function() {
  this.Codewave.ClosingPromp = (function() {
    function ClosingPromp(_at_codewave, _at_start, _at_end) {
      this.codewave = _at_codewave;
      this.start = _at_start;
      this.end = _at_end;
      this.timeout = null;
      this.len = this.end - this.start;
      this.codewave.editor.insertTextAt("\n" + this.codewave.brakets + this.codewave.closeChar + this.codewave.brakets, this.end);
      this.codewave.editor.insertTextAt(this.codewave.brakets + this.codewave.brakets + "\n", this.start);
      this.codewave.editor.setCursorPos(this.start + this.codewave.brakets.length);
      this.codewave.editor.onAnyChange = (function(_this) {
        return function() {
          return _this.onAnyChange();
        };
      })(this);
    }

    ClosingPromp.prototype.onAnyChange = function() {
      if (this.timeout != null) {
        clearTimeout(this.timeout);
      }
      return this.timeout = setTimeout(((function(_this) {
        return function() {
          var closeBounds, cmd, cpos, openBounds;
          cpos = _this.codewave.editor.getCursorPos();
          if ((openBounds = _this.whithinOpenBounds(cpos.end)) != null) {
            cmd = _this.codewave.editor.textSubstr(openBounds.innerStart, openBounds.innerEnd).split(' ')[0];
            if (((closeBounds = _this.whithinCloseBounds(openBounds)) != null) && _this.codewave.editor.textSubstr(closeBounds.innerStart, closeBounds.innerEnd) !== cmd) {
              _this.codewave.editor.spliceText(closeBounds.innerStart, closeBounds.innerEnd, cmd);
              return _this.codewave.editor.setCursorPos(cpos.start, cpos.end);
            }
          } else {
            return _this.stop();
          }
        };
      })(this)), 2);
    };

    ClosingPromp.prototype.stop = function() {
      if (this.timeout != null) {
        clearTimeout(this.timeout);
      }
      this.codewave.editor.onAnyChange = null;
      if (this.codewave.closingPromp === this) {
        return this.codewave.closingPromp = null;
      }
    };

    ClosingPromp.prototype.cancel = function() {
      var closeBounds, openBounds;
      if (((openBounds = this.whithinOpenBounds(this.start + this.codewave.brakets.length)) != null) && ((closeBounds = this.whithinCloseBounds(openBounds)) != null)) {
        this.codewave.editor.spliceText(closeBounds.start - 1, closeBounds.end, '');
        this.codewave.editor.spliceText(openBounds.start, openBounds.end + 1, '');
        this.codewave.editor.setCursorPos(this.start, this.end);
      }
      return this.stop();
    };

    ClosingPromp.prototype.whithinOpenBounds = function(pos) {
      var innerEnd, innerStart;
      innerStart = this.start + this.codewave.brakets.length;
      if (this.codewave.findPrevBraket(pos) === this.start && this.codewave.editor.textSubstr(this.start, innerStart) === this.codewave.brakets && ((innerEnd = this.codewave.findNextBraket(innerStart)) != null)) {
        return {
          start: this.start,
          innerStart: innerStart,
          innerEnd: innerEnd,
          end: innerEnd + this.codewave.brakets.length
        };
      }
    };

    ClosingPromp.prototype.whithinCloseBounds = function(openBounds) {
      var innerEnd, innerStart, start;
      start = openBounds.end + this.len + 2;
      innerStart = start + this.codewave.brakets.length + this.codewave.closeChar.length;
      if (this.codewave.editor.textSubstr(start, innerStart) === this.codewave.brakets + this.codewave.closeChar && ((innerEnd = this.codewave.findNextBraket(innerStart)) != null)) {
        return {
          start: start,
          innerStart: innerStart,
          innerEnd: innerEnd,
          end: innerEnd + this.codewave.brakets.length
        };
      }
    };

    return ClosingPromp;

  })();

}).call(this);

//# sourceMappingURL=closing_promp.js.map
