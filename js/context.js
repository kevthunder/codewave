// Generated by CoffeeScript 1.9.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.Codewave.Context = (function() {
    function Context(_at_codewave) {
      this.codewave = _at_codewave;
      this.nameSpaces = [];
    }

    Context.prototype.addNameSpace = function(name) {
      if (__indexOf.call(this.nameSpaces, name) < 0) {
        this.nameSpaces.push(name);
        return this._namespaces = null;
      }
    };

    Context.prototype.addNamespaces = function(spaces) {
      var space, _i, _len, _results;
      if (spaces) {
        if (typeof spaces === 'string') {
          spaces = [spaces];
        }
        _results = [];
        for (_i = 0, _len = spaces.length; _i < _len; _i++) {
          space = spaces[_i];
          _results.push(this.addNameSpace(space));
        }
        return _results;
      }
    };

    Context.prototype.removeNameSpace = function(name) {
      return this.nameSpaces = this.nameSpaces.filter(function(n) {
        return n !== name;
      });
    };

    Context.prototype.getNameSpaces = function() {
      var npcs;
      if (this._namespaces == null) {
        npcs = ['core'].concat(this.nameSpaces);
        if (this.parent != null) {
          npcs = npcs.concat(this.parent.getNameSpaces());
        }
        this._namespaces = Codewave.util.unique(npcs);
      }
      return this._namespaces;
    };

    Context.prototype.getCmd = function(cmdName, nameSpaces) {
      var finder;
      if (nameSpaces == null) {
        nameSpaces = [];
      }
      finder = this.getFinder(cmdName, nameSpaces);
      return finder.find();
    };

    Context.prototype.getFinder = function(cmdName, nameSpaces) {
      if (nameSpaces == null) {
        nameSpaces = [];
      }
      return new Codewave.CmdFinder(cmdName, {
        namespaces: nameSpaces,
        useDetectors: this.isRoot(),
        codewave: this.codewave,
        parentContext: this
      });
    };

    Context.prototype.isRoot = function() {
      return this.parent == null;
    };

    Context.prototype.wrapComment = function(str) {
      var cc;
      cc = this.getCommentChar();
      if (cc.indexOf('%s') > -1) {
        return cc.replace('%s', str);
      } else {
        return cc + ' ' + str + ' ' + cc;
      }
    };

    Context.prototype.wrapCommentLeft = function(str) {
      var cc, i;
      if (str == null) {
        str = '';
      }
      cc = this.getCommentChar();
      console.log();
      if ((i = cc.indexOf('%s')) > -1) {
        return cc.substr(0, i) + str;
      } else {
        return cc + ' ' + str;
      }
    };

    Context.prototype.wrapCommentRight = function(str) {
      var cc, i;
      if (str == null) {
        str = '';
      }
      cc = this.getCommentChar();
      if ((i = cc.indexOf('%s')) > -1) {
        return str + cc.substr(i + 2);
      } else {
        return str + ' ' + cc;
      }
    };

    Context.prototype.getCommentChar = function() {
      var cmd, res;
      if (this.commentChar != null) {
        return this.commentChar;
      }
      cmd = this.getCmd('comment');
      if (cmd != null) {
        res = cmd.result();
        if (res != null) {
          res = res.replace('~~content~~', '%s');
          if (this.process != null) {
            this.commentChar = res;
          }
          return res;
        }
      }
      return '<!-- %s -->';
    };

    return Context;

  })();

}).call(this);

//# sourceMappingURL=context.js.map
