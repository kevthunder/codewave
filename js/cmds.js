// Generated by CoffeeScript 1.8.0
(function() {
  this.Codewave.cmd = {
    hello: "Hello, World!",
    box: (function() {
      function _Class(instance) {
        var _ref;
        this.instance = instance;
        if (this.instance.content) {
          _ref = this.textBounds(this.instance.content), this.width = _ref[0], this.height = _ref[1];
        } else {
          this.width = 50;
          this.height = 3;
        }
        this.width = this.instance.params.length > 1 ? parseInt(this.instance.params[0]) : this.instance.named.width != null ? this.instance.named.width : this.width;
        this.height = this.instance.params.length > 1 ? parseInt(this.instance.params[1]) : this.instance.params.length > 0 ? parseInt(this.instance.params[0]) : this.instance.named.height != null ? this.instance.named.height : this.height;
        this.cmd = this.instance.getParam([0, 'cmd']);
        this.deco = this.instance.codewave.deco;
        this.pad = 2;
      }

      _Class.prototype.result = function() {
        var content, lines, x;
        lines = (this.instance.content || '').split("\n");
        return content = this.startSep() + "\n" + ((function() {
          var _i, _ref, _results;
          _results = [];
          for (x = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
            _results.push(this.line(lines[x]));
          }
          return _results;
        }).call(this)).join("\n") + "\n" + this.endSep();
      };

      _Class.prototype.wrapComment = function(str) {
        return this.instance.codewave.wrapComment(str);
      };

      _Class.prototype.separator = function() {
        var len;
        len = this.width + 2 * this.pad + 2 * this.deco.length;
        return this.wrapComment(this.decoLine(len));
      };

      _Class.prototype.startSep = function() {
        var cmd, len;
        cmd = '';
        if (this.cmd) {
          cmd = this.instance.codewave.brakets + this.cmd + this.instance.codewave.brakets;
        }
        len = this.width + 2 * this.pad + 2 * this.deco.length - cmd.length;
        return this.wrapComment(cmd + this.decoLine(len));
      };

      _Class.prototype.endSep = function() {
        var closing, len;
        closing = '';
        if (this.cmd) {
          closing = this.instance.codewave.brakets + this.instance.codewave.closeChar + this.cmd.split(" ")[0] + this.instance.codewave.brakets;
        }
        len = this.width + 2 * this.pad + 2 * this.deco.length - closing.length;
        return this.wrapComment(this.decoLine(len) + closing);
      };

      _Class.prototype.decoLine = function(len) {
        return Array(Math.ceil(len / this.deco.length) + 1).join(this.deco).substring(0, len);
      };

      _Class.prototype.padding = function() {
        return Array(this.pad + 1).join(" ");
      };

      _Class.prototype.line = function(text) {
        if (text == null) {
          text = '';
        }
        return this.wrapComment(this.deco + this.padding() + text + Array(this.width - text.length + 1).join(" ") + this.padding() + this.deco);
      };

      _Class.prototype.textBounds = function(text) {
        var l, lines, w, _i, _len;
        lines = text.split("\n");
        w = 0;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          l = lines[_i];
          w = Math.max(w, l.length);
        }
        return [w, lines.length];
      };

      return _Class;

    })(),
    close: (function() {
      function _Class(instance) {
        this.instance = instance;
        this.deco = this.instance.codewave.deco;
      }

      _Class.prototype.startFind = function() {
        return this.instance.codewave.wrapCommentLeft(this.deco + this.deco);
      };

      _Class.prototype.endFind = function() {
        return this.instance.codewave.wrapCommentRight(this.deco + this.deco);
      };

      _Class.prototype.execute = function() {
        var end, endFind, start, startFind;
        startFind = this.startFind();
        endFind = this.endFind();
        start = this.instance.codewave.findPrev(this.instance.pos, startFind);
        end = this.instance.codewave.findNext(this.instance.getEndPos(), endFind) + endFind.length;
        console.log([startFind, endFind]);
        console.log([start, end]);
        if ((start != null) && (end != null)) {
          this.instance.codewave.editor.spliceText(start, end, '');
          return this.instance.codewave.editor.setCursorPos(start);
        } else {
          return this.instance.replaceWith('');
        }
      };

      return _Class;

    })(),
    edit: (function() {
      function _Class(instance) {
        var _ref;
        this.instance = instance;
        this.cmdName = this.instance.getParam([0, 'cmd']);
        this.verbalize = (_ref = this.instance.getParam([1])) === 'v' || _ref === 'verbalize';
        this.cmd = this.instance.codewave.getCmd(this.cmdName);
        this.editable = (this.cmd.result != null) && typeof this.cmd.result === 'string';
        this.content = this.instance.content;
      }

      _Class.prototype.result = function() {
        if (this.cmd) {
          if (this.content) {
            return this.resultWithContent();
          } else {
            return this.resultWithoutContent();
          }
        }
      };

      _Class.prototype.resultWithContent = function() {};

      _Class.prototype.resultWithoutContent = function() {
        var parser;
        if (this.editable) {
          parser = new Codewave(new Codewave.TextParser("~~box cmd:\"" + this.instance.noBracket + "\"~~\n~~source~~\n" + this.cmd.result + "\n~~/source~~\n~~save~~ ~~close~~\n~~/box~~"));
          if (this.verbalize) {
            return parser.getText();
          } else {
            return parser.parseAll();
          }
        }
      };

      return _Class;

    })()
  };

}).call(this);

//# sourceMappingURL=cmds.js.map
