// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ({
    _optKey: function(key, dict, defVal) {
      if (defVal == null) {
        defVal = null;
      }
      if (__indexOf.call(dict, key) >= 0) {
        return dict[key];
      } else {
        return defVal;
      }
    }
  });

  this.Codewave.Command = (function() {
    function Command(name, data, parent) {
      var _ref;
      this.name = name;
      this.data = data != null ? data : null;
      this.parent = parent != null ? parent : null;
      this.cmds = [];
      this.detectors = [];
      this.executeFunct = this.resultFunct = this.resultStr = this.aliasOf = this.cls = null;
      this.aliased = null;
      this.fullName = this.name;
      this.depth = 0;
      _ref = [null, false], this._parent = _ref[0], this._inited = _ref[1];
      this.setParent(parent);
      this.defaults = {};
      this.defaultOptions = {
        nameToParam: null,
        checkCarret: True,
        parse: false
      };
      this.options = {};
      this.finalOptions = null;
    }

    Command.prototype.setParent = function(value) {
      if (this._parent !== value) {
        this._parent = value;
        this.fullName = ((this._parent != null) && (this._parent.name != null) ? this._parent.fullName + ':' + this.name : this.name);
        return this.depth = (this._parent != null ? this._parent.depth + 1 : 0);
      }
    };

    Command.prototype.init = function() {
      if (!this._inited) {
        this._inited = true;
        this.parseData(this.data);
      }
      return this;
    };

    Command.prototype.isEditable = function() {
      return this.resultStr != null;
    };

    Command.prototype.isExecutable = function() {
      var p, _i, _len, _ref;
      _ref = ['resultStr', 'resultFunct', 'aliasOf', 'cls', 'executeFunct'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (this[p] != null) {
          return true;
        }
      }
      return false;
    };

    Command.prototype.resultIsAvailable = function(instance) {
      var p, _i, _len, _ref;
      if (instance == null) {
        instance = null;
      }
      if ((instance != null) && (instance.cmdObj != null)) {
        return instance.cmdObj.resultIsAvailable();
      }
      _ref = ['resultStr', 'resultFunct'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (this[p] != null) {
          return true;
        }
      }
      return false;
    };

    Command.prototype.getDefaults = function(instance) {
      var aliased, res;
      if (instance == null) {
        instance = null;
      }
      res = {};
      aliased = this.getAliased(instance);
      if (aliased != null) {
        res.update(aliased.getDefaults(instance));
      }
      res.update(this.defaults);
      if ((instance != null) && (instance.cmdObj != null)) {
        res.update(instance.cmdObj.getDefaults());
      }
      return res;
    };

    Command.prototype.result = function(instance) {
      var aliased;
      if (instance.cmdObj != null) {
        return instance.cmdObj.result();
      }
      aliased = this.getAliased(instance);
      if (aliased != null) {
        return aliased.result(instance);
      }
      if (this.resultFunct != null) {
        return this.resultFunct(instance);
      }
      if (this.resultStr != null) {
        return this.resultStr;
      }
    };

    Command.prototype.execute = function(instance) {
      var aliased;
      if (instance.cmdObj != null) {
        return instance.cmdObj.execute();
      }
      aliased = this.getAliased(instance);
      if (aliased != null) {
        return aliased.execute(instance);
      }
      if (this.executeFunct != null) {
        return this.executeFunct(instance);
      }
    };

    Command.prototype.getExecutableObj = function(instance) {
      var aliased;
      this.init();
      if (this.cls != null) {
        return this.cls(instance);
      }
      aliased = this.getAliased(instance);
      if (aliased != null) {
        return aliased.getExecutableObj(instance);
      }
    };

    Command.prototype.getAliased = function(instance) {
      var aliased, codewave;
      if (instance == null) {
        instance = null;
      }
      if ((instance != null) && instance.cmd === this && (instance.aliasedCmd != null)) {
        return instance.aliasedCmd || null;
      }
      if (this.aliasOf != null) {
        if (instance != null) {
          codewave = codewave_core.codewave.Codewave();
        }
        ({
          "else": codewave = instance.codewave
        });
        aliased = codewave.getCmd(this.aliasOf);
        if (instance != null) {
          instance.aliasedCmd = aliased || false;
        }
        return aliased;
      }
    };

    Command.prototype.setOptions = function(data) {
      var key, val, _i, _len, _results;
      _results = [];
      for (val = _i = 0, _len = data.length; _i < _len; val = ++_i) {
        key = data[val];
        if (__indexOf.call(this.defaultOptions, key) >= 0) {
          _results.push(this.options[key] = val);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Command.prototype.getOptions = function(instance) {
      var aliased, opt;
      if (instance == null) {
        instance = null;
      }
      if ((instance != null) && (instance.cmdOptions != null)) {
        return instance.cmdOptions;
      }
      opt = {};
      opt.update(this.defaultOptions);
      aliased = this.getAliased(instance);
      if (aliased != null) {
        opt.update(aliased.getOptions(instance));
      }
      opt.update(this.options);
      if ((instance != null) && (instance.cmdObj != null)) {
        opt.update(instance.cmdObj.getOptions());
      }
      if (instance != null) {
        instance.cmdOptions = opt;
      }
      return opt;
    };

    Command.prototype.getOption = function(key, instance) {
      var options;
      if (instance == null) {
        instance = null;
      }
      options = this.getOptions(instance);
      if (__indexOf.call(options, key) >= 0) {
        return options[key];
      }
    };

    Command.prototype.parseData = function(data) {
      this.data = data;
      if (isinstance(data, str)) {
        this.resultStr = data;
        return true;
      } else if (isinstance(data, dict)) {
        return this.parseDictData(data);
      }
      return false;
    };

    Command.prototype.parseDictData = function(data) {
      var execute, res;
      res = _optKey('result', data);
      if (typeof res === "function") {
        this.resultFunct = res;
      } else if (res != null) {
        this.resultStr = res;
        this.options['parse'] = true;
      }
      execute = _optKey('execute', data);
      if (typeof execute === "function") {
        this.executeFunct = execute;
      }
      this.aliasOf = _optKey('aliasOf', data);
      this.cls = _optKey('cls', data);
      this.defaults = _optKey('defaults', data, this.defaults);
      this.setOptions(data);
      if (__indexOf.call(data, 'help') >= 0) {
        this.addCmd(this, new Command('help', data['help'], this));
      }
      if (__indexOf.call(data, 'fallback') >= 0) {
        this.addCmd(this, new Command('fallback', data['fallback'], this));
      }
      if (__indexOf.call(data, 'cmds') >= 0) {
        this.addCmds(data['cmds']);
      }
      return true;
    };

    Command.prototype.addCmds = function(cmds) {
      var data, name, _i, _len, _results;
      _results = [];
      for (data = _i = 0, _len = cmds.length; _i < _len; data = ++_i) {
        name = cmds[data];
        _results.push(this.addCmd(new Command(name, data, this)));
      }
      return _results;
    };

    Command.prototype.addCmd = function(cmd) {
      var exists;
      exists = this.getCmd(cmd.name);
      if (exists != null) {
        this.removeCmd(exists);
      }
      cmd.setParent(this);
      this.cmds.push(cmd);
      return cmd;
    };

    Command.prototype.removeCmd = function(cmd) {
      var i;
      if ((i = this.cmds.indexOf(cmd)) > -1) {
        this.cmds.splice(i, 1);
      }
      return cmd;
    };

    Command.prototype.getCmd = function(fullname) {
      var cmd, name, parts, _i, _len, _ref;
      this.init();
      parts = fullname.split(':', 1);
      name = parts.pop();
      if (parts.length > 0) {
        return this.getCmd(parts[0]).getCmd(name);
      }
      _ref = this.cmds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cmd = _ref[_i];
        if (cmd.name === name) {
          return cmd;
        }
      }
    };

    Command.prototype.setCmd = function(fullname, cmd) {
      var name, next, parts;
      parts = fullname.split(':', 1);
      name = parts.pop();
      if (parts.length > 0) {
        next = this.getCmd(parts[0]);
        if (next != null) {
          next = this.addCmd(new Command(parts[0]));
        }
        return next.setCmd(name, cmd);
      } else {
        this.addCmd(cmd);
        return cmd;
      }
    };

    Command.prototype.addDetector = function(detector) {
      return this.detectors.push(detector);
    };

    return Command;

  })();

  this.Codewave.BaseCommand = (function() {
    function BaseCommand(instance) {
      this.instance = instance;
    }

    BaseCommand.prototype.resultIsAvailable = function() {
      return this["result"] != null;
    };

    BaseCommand.prototype.getDefaults = function() {
      return {};
    };

    BaseCommand.prototype.getOptions = function() {
      return {};
    };

    return BaseCommand;

  })();

}).call(this);

//# sourceMappingURL=command.js.map
