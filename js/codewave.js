// Generated by CoffeeScript 1.8.0
(function() {
  this.Codewave = (function() {
    function Codewave(target) {
      this.target = target;
      this.keyListener = new Codewave.KeyListener();
      this.editor = new Codewave.TextAreaEditor(this.target);
      this.keyListener.onActivationKey = (function(_this) {
        return function() {
          return _this.onActivationKey();
        };
      })(this);
    }

    Codewave.prototype.onActivationKey = function() {
      var cmd;
      console.log('activation key');
      if ((cmd = this.cursorOnCommand())) {
        console.log(cmd);
        return cmd.execute();
      } else {
        return this.addBrakets();
      }
    };

    Codewave.prototype.cursorOnCommand = function() {
      var cpos, next, pos, prev;
      cpos = this.editor.getCursorPos();
      pos = cpos.end;
      prev = this.findPrevBraket(this.isEndLine(pos) ? pos : pos + 1);
      if (prev == null) {
        return false;
      }
      if (prev >= pos - 2) {
        pos = prev;
        prev = this.findPrevBraket(pos);
      }
      next = this.findNextBraket(pos);
      if (!((next != null) && this.countPrevBraket(prev) % 2 === 0)) {
        return false;
      }
      return new Codewave.CmdInstance(this, prev, this.editor.textSubstr(prev, next + this.brakets.length));
    };

    Codewave.prototype.countPrevBraket = function(start) {
      var i;
      i = 0;
      while (start = this.findPrevBraket(start)) {
        i++;
      }
      return i;
    };

    Codewave.prototype.isEndLine = function(pos) {
      return this.editor.textSubstr(pos, pos + 1) === "\n" || pos + 1 >= this.editor.textLen();
    };

    Codewave.prototype.findLineStart = function(pos) {
      var p;
      p = this.findAnyNext(pos, ["\n"], -1);
      if (p) {
        return p.pos + 1;
      } else {
        return 0;
      }
    };

    Codewave.prototype.findPrevBraket = function(start) {
      return this.findNextBraket(start, -1);
    };

    Codewave.prototype.findNextBraket = function(start, direction) {
      var f;
      if (direction == null) {
        direction = 1;
      }
      f = this.findAnyNext(start, [this.brakets, "\n"], direction);
      if (f && f.str === this.brakets) {
        return f.pos;
      }
    };

    Codewave.prototype.findAnyNext = function(start, strings, direction) {
      var end, pos, str, _i, _len, _ref, _ref1;
      if (direction == null) {
        direction = 1;
      }
      pos = start;
      while (true) {
        if (!((0 < pos && pos < this.editor.textLen()))) {
          return false;
        }
        for (_i = 0, _len = strings.length; _i < _len; _i++) {
          str = strings[_i];
          _ref = [pos, pos + str.length * direction], start = _ref[0], end = _ref[1];
          if (end < start) {
            _ref1 = [end, start], start = _ref1[0], end = _ref1[1];
          }
          if (str === this.editor.textSubstr(start, end)) {
            return {
              str: str,
              pos: direction < 0 ? pos - str.length : pos
            };
          }
        }
        pos += direction;
      }
    };

    Codewave.prototype.addBrakets = function() {
      var cpos;
      cpos = this.editor.getCursorPos();
      this.editor.insertTextAt(this.brakets, cpos.end);
      this.editor.insertTextAt(this.brakets, cpos.start);
      return this.editor.setCursorPos(cpos.end + this.brakets.length);
    };

    Codewave.prototype.getCommentChar = function() {
      return '<!-- %s -->';
    };

    Codewave.prototype.brakets = '~~';

    Codewave.prototype.deco = '~';

    Codewave.prototype.closeChar = '/';

    return Codewave;

  })();

  this.Codewave.cmd = {
    hello: "Hello,\nWorld!",
    box: (function() {
      function _Class(instance) {
        this.instance = instance;
        this.width = this.instance.params.length > 1 ? parseInt(this.instance.params[0]) : 50;
        this.height = this.instance.params.length > 1 ? parseInt(this.instance.params[1]) : this.instance.params.length > 0 ? parseInt(this.instance.params[0]) : 3;
        this.commentChar = this.instance.codewave.getCommentChar();
        this.deco = this.instance.codewave.deco;
        this.pad = 2;
      }

      _Class.prototype.execute = function() {
        var content, x;
        content = this.separator() + "\n" + ((function() {
          var _i, _ref, _results;
          _results = [];
          for (x = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
            _results.push(this.line());
          }
          return _results;
        }).call(this)).join("\n") + "\n" + this.separator();
        return this.instance.replaceWith(content);
      };

      _Class.prototype.wrapComment = function(str) {
        if (this.commentChar.indexOf('%s') > -1) {
          return this.commentChar.replace('%s', str);
        } else {
          return this.commentChar + ' ' + str + ' ' + this.commentChar;
        }
      };

      _Class.prototype.separator = function() {
        var len;
        len = this.width + 2 * this.pad + 2 * this.deco.length;
        return this.wrapComment(Array(Math.ceil(len / this.deco.length) + 1).join(this.deco).substring(0, len));
      };

      _Class.prototype.padding = function() {
        return Array(this.pad + 1).join(" ");
      };

      _Class.prototype.line = function(text) {
        if (text == null) {
          text = '';
        }
        return this.wrapComment(this.deco + this.padding() + text + Array(this.width - text.length + 1).join(" ") + this.padding() + this.deco);
      };

      return _Class;

    })()
  };

  this.Codewave.CmdInstance = (function() {
    function CmdInstance(codewave, pos, str) {
      this.codewave = codewave;
      this.pos = pos;
      this.str = str;
      this.noBracket = this._removeBracket(this.str);
      this._splitComponents();
      this._findClosing();
      this.cmd = this._getCmd();
    }

    CmdInstance.prototype._splitComponents = function() {
      var parts;
      parts = this.noBracket.split(" ");
      this.cmdName = parts.shift();
      return this.params = parts;
    };

    CmdInstance.prototype._findClosing = function() {
      var f;
      if (f = this._findClosingPos()) {
        this.content = this.codewave.editor.textSubstr(this.pos + this.str.length, f.pos);
        return this.str = this.codewave.editor.textSubstr(this.pos, f.pos + f.str.length);
      }
    };

    CmdInstance.prototype._findClosingPos = function() {
      var another, close, f, nested, pos;
      close = this.codewave.brakets + this.codewave.closeChar + this.cmdName + this.codewave.brakets;
      another = this.codewave.brakets + this.cmdName;
      pos = this.pos + this.str.length;
      nested = 0;
      while (f = this.codewave.findAnyNext(pos, [close, another])) {
        pos = f.pos + f.str.length;
        if (f.str === close) {
          if (nested > 0) {
            nested--;
          } else {
            return f;
          }
        } else {
          nested++;
        }
      }
      return null;
    };

    CmdInstance.prototype._getCmd = function() {
      var cmd;
      cmd = Codewave.cmd[this.cmdName];
      if (typeof cmd === "function" && (cmd.prototype.execute != null)) {
        return new cmd(this);
      } else {
        return cmd;
      }
    };

    CmdInstance.prototype._removeBracket = function(str) {
      return str.substring(this.codewave.brakets.length, str.length - this.codewave.brakets.length);
    };

    CmdInstance.prototype.execute = function() {
      if (this.cmd != null) {
        if (this.cmd.execute != null) {
          return this.cmd.execute(this);
        } else if (this.cmd.content) {
          return this.replaceWith(this.cmd.content);
        } else if (typeof this.cmd === 'string') {
          return this.replaceWith(this.cmd);
        }
      }
    };

    CmdInstance.prototype.getIndent = function() {
      return this.pos - this.codewave.findLineStart(this.pos);
    };

    CmdInstance.prototype.applyIndent = function(text) {
      return text.replace(/\n/g, "\n" + Array(this.getIndent() + 1).join(" "));
    };

    CmdInstance.prototype.replaceWith = function(text) {
      text = this.applyIndent(text);
      this.codewave.editor.spliceText(this.pos, this.pos + this.str.length, text);
      return this.codewave.editor.setCursorPos(this.pos + text.length);
    };

    return CmdInstance;

  })();

  this.Codewave.TextAreaEditor = (function() {
    function TextAreaEditor(target) {
      this.target = target;
      this.obj = document.getElementById(this.target);
    }

    TextAreaEditor.prototype.selectionPropExists = function() {
      return "selectionStart" in this.obj;
    };

    TextAreaEditor.prototype.hasFocus = function() {
      return document.activeElement === this.obj;
    };

    TextAreaEditor.prototype.textCharAt = function(pos) {
      return this.obj.value[pos];
    };

    TextAreaEditor.prototype.textLen = function(pos) {
      return this.obj.value.length;
    };

    TextAreaEditor.prototype.textSubstr = function(start, end) {
      return this.obj.value.substring(start, end);
    };

    TextAreaEditor.prototype.insertTextAt = function(text, pos) {
      return this.obj.value = this.obj.value.substring(0, pos) + text + this.obj.value.substring(pos, this.obj.value.length);
    };

    TextAreaEditor.prototype.spliceText = function(start, end, text) {
      return this.obj.value = this.obj.value.slice(0, start) + (text || "") + this.obj.value.slice(end);
    };

    TextAreaEditor.prototype.getCursorPos = function() {
      if (this.hasFocus) {
        if (this.selectionPropExists) {
          return {
            start: this.obj.selectionStart,
            end: this.obj.selectionEnd
          };
        } else {
          return this.getCursorPosFallback();
        }
      }
    };

    TextAreaEditor.prototype.getCursorPosFallback = function() {
      var len, pos, rng, sel;
      if (this.obj.createTextRange) {
        sel = document.selection.createRange();
        if (sel.parentElement() === this.obj) {
          rng = this.obj.createTextRange();
          rng.moveToBookmark(sel.getBookmark());
          len = 0;
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            len++;
            rng.moveEnd("character", -1);
          }
          rng.setEndPoint("StartToStart", this.obj.createTextRange());
          pos = {
            start: 0,
            end: len
          };
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            pos.start++;
            pos.end++;
            rng.moveEnd("character", -1);
          }
          return pos;
        }
      }
    };

    TextAreaEditor.prototype.setCursorPos = function(start, end) {
      if (arguments.length < 2) {
        end = start;
      }
      if (this.selectionPropExists) {
        setTimeout(((function(_this) {
          return function() {
            _this.obj.selectionStart = start;
            return _this.obj.selectionEnd = end;
          };
        })(this)), 1);
      } else {
        this.setCursorPosFallback(start, end);
      }
    };

    TextAreaEditor.prototype.setCursorPosFallback = function(start, end) {
      var rng;
      if (this.obj.createTextRange) {
        rng = this.obj.createTextRange();
        rng.moveStart("character", start);
        rng.collapse();
        rng.moveEnd("character", end - start);
        return rng.select();
      }
    };

    return TextAreaEditor;

  })();

  this.Codewave.KeyListener = (function() {
    function KeyListener(target) {
      this.target = target;
      document.onkeydown = (function(_this) {
        return function(e) {
          if (e.keyCode === 69 && e.ctrlKey) {
            e.preventDefault();
            if (_this.onActivationKey != null) {
              return _this.onActivationKey();
            }
          }
        };
      })(this);
    }

    return KeyListener;

  })();

}).call(this);

//# sourceMappingURL=codewave.js.map
