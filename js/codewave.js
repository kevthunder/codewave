// Generated by CoffeeScript 1.8.0
(function() {
  this.Codewave = (function() {
    function Codewave(target) {
      this.target = target;
      this.keyListener = new Codewave.KeyListener();
      this.editor = new Codewave.TextAreaEditor(this.target);
      this.keyListener.onActivationKey = (function(_this) {
        return function() {
          return _this.onActivationKey();
        };
      })(this);
    }

    Codewave.prototype.onActivationKey = function() {
      console.log('activation key');
      console.log(this.editor.getCursorPos());
      if (this.cursorOnCommand()) {

      } else {
        return this.addBrakets();
      }
    };

    Codewave.prototype.cursorOnCommand = function() {
      var cpos;
      cpos = this.editor.getCursorPos();
      return this.findNextBraket(cpos.end, [this.brakets, "\n"]) != null;
    };

    Codewave.prototype.findNextBraket = function(start, direction) {
      var f;
      if (direction == null) {
        direction = 1;
      }
      f = this.findAnyNext(start, [this.brakets, "\n"]);
      if (f && f.str === this.brakets) {
        return f.pos;
      }
    };

    Codewave.prototype.findAnyNext = function(start, strings, direction) {
      var end, pos, str, _i, _len, _ref, _ref1;
      if (direction == null) {
        direction = 1;
      }
      pos = start;
      while (true) {
        if (!((0 < pos && pos < this.editor.textLen()))) {
          return false;
        }
        pos += direction;
        for (_i = 0, _len = strings.length; _i < _len; _i++) {
          str = strings[_i];
          _ref = [pos, pos + str.length * direction], start = _ref[0], end = _ref[1];
          if (end < start) {
            _ref1 = [end, start], start = _ref1[0], end = _ref1[1];
          }
          if (str === this.editor.textSubstr(start, end)) {
            return {
              str: str,
              pos: pos
            };
          }
        }
      }
    };

    Codewave.prototype.addBrakets = function() {
      var cpos;
      cpos = this.editor.getCursorPos();
      this.editor.insertTextAt(this.brakets, cpos.end);
      this.editor.insertTextAt(this.brakets, cpos.start);
      return this.editor.setCursorPos(cpos.end + this.brakets.length);
    };

    Codewave.prototype.brakets = '~~';

    return Codewave;

  })();

  this.Codewave.TextAreaEditor = (function() {
    function TextAreaEditor(target) {
      this.target = target;
      this.obj = document.getElementById(this.target);
    }

    TextAreaEditor.prototype.selectionPropExists = function() {
      return "selectionStart" in this.obj;
    };

    TextAreaEditor.prototype.hasFocus = function() {
      return document.activeElement === this.obj;
    };

    TextAreaEditor.prototype.textCharAt = function(pos) {
      return this.obj.value[pos];
    };

    TextAreaEditor.prototype.textLen = function(pos) {
      return this.obj.value.length;
    };

    TextAreaEditor.prototype.textSubstr = function(start, end) {
      return this.obj.value.substring(start, end);
    };

    TextAreaEditor.prototype.insertTextAt = function(text, pos) {
      return this.obj.value = this.obj.value.substring(0, pos) + text + this.obj.value.substring(pos, this.obj.value.length);
    };

    TextAreaEditor.prototype.getCursorPos = function() {
      if (this.hasFocus) {
        if (this.selectionPropExists) {
          return {
            start: this.obj.selectionStart,
            end: this.obj.selectionEnd
          };
        } else {
          return this.getCursorPosFallback();
        }
      }
    };

    TextAreaEditor.prototype.getCursorPosFallback = function() {
      var len, pos, rng, sel;
      if (this.obj.createTextRange) {
        sel = document.selection.createRange();
        if (sel.parentElement() === this.obj) {
          rng = this.obj.createTextRange();
          rng.moveToBookmark(sel.getBookmark());
          len = 0;
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            len++;
            rng.moveEnd("character", -1);
          }
          rng.setEndPoint("StartToStart", this.obj.createTextRange());
          pos = {
            start: 0,
            end: len
          };
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            pos.start++;
            pos.end++;
            rng.moveEnd("character", -1);
          }
          return pos;
        }
      }
    };

    TextAreaEditor.prototype.setCursorPos = function(start, end) {
      if (arguments.length < 2) {
        end = start;
      }
      if (this.selectionPropExists) {
        setTimeout(((function(_this) {
          return function() {
            _this.obj.selectionStart = start;
            return _this.obj.selectionEnd = end;
          };
        })(this)), 1);
      } else {
        this.setCursorPosFallback(start, end);
      }
    };

    TextAreaEditor.prototype.setCursorPosFallback = function(start, end) {
      var rng;
      if (this.obj.createTextRange) {
        rng = this.obj.createTextRange();
        rng.moveStart("character", start);
        rng.collapse();
        rng.moveEnd("character", end - start);
        return rng.select();
      }
    };

    return TextAreaEditor;

  })();

  this.Codewave.KeyListener = (function() {
    function KeyListener(target) {
      this.target = target;
      document.onkeydown = (function(_this) {
        return function(e) {
          if (e.keyCode === 69 && e.ctrlKey) {
            e.preventDefault();
            if (_this.onActivationKey != null) {
              return _this.onActivationKey();
            }
          }
        };
      })(this);
    }

    return KeyListener;

  })();

}).call(this);

//# sourceMappingURL=codewave.js.map
