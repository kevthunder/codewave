// Generated by CoffeeScript 1.8.0
(function() {
  this.Codewave.CmdInstance = (function() {
    function CmdInstance(codewave, pos, str) {
      this.codewave = codewave;
      this.pos = pos;
      this.str = str;
      this._checkCloser();
      this.noBracket = this._removeBracket(this.str);
      this._splitComponents();
      this._findClosing();
      this._checkBox();
      this.cmd = this._getCmd();
    }

    CmdInstance.prototype._checkCloser = function() {
      var f, noBracket;
      noBracket = this._removeBracket(this.str);
      if (noBracket.substring(0, this.codewave.closeChar.length) === this.codewave.closeChar && (f = this._findOpeningPos())) {
        this.closingPos = {
          pos: this.pos,
          str: this.str
        };
        this.pos = f.pos;
        return this.str = f.str;
      }
    };

    CmdInstance.prototype._findOpeningPos = function() {
      var closing, cmdName, f, opening;
      cmdName = this._removeBracket(this.str).substring(this.codewave.closeChar.length);
      opening = this.codewave.brakets + cmdName;
      closing = this.str;
      if (f = this.codewave.findMatchingPair(this.pos, opening, closing, -1)) {
        f.str = this.codewave.editor.textSubstr(f.pos, this.codewave.findNextBraket(f.pos + f.str.length) + this.codewave.brakets.length);
        return f;
      }
    };

    CmdInstance.prototype._splitComponents = function() {
      var parts;
      parts = this.noBracket.split(" ");
      this.cmdName = parts.shift();
      return this._parseParams(parts.join(" "));
    };

    CmdInstance.prototype._parseParams = function(params) {
      var chr, i, inStr, name, param, _i, _ref;
      this.params = [];
      this.named = {};
      inStr = false;
      param = '';
      name = false;
      for (i = _i = 0, _ref = params.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        chr = params[i];
        if (chr === ' ' && !inStr) {
          if (name) {
            this.named[name] = param;
          } else {
            this.params.push(param);
          }
          param = '';
          name = false;
        } else if (chr === '"' && (i === 0 || params[i - 1] !== '\\')) {
          inStr = !inStr;
        } else if (chr === ':' && !name && !inStr) {
          name = param;
          param = '';
        } else {
          param += chr;
        }
      }
      if (name) {
        return this.named[name] = param;
      } else {
        return this.params.push(param);
      }
    };

    CmdInstance.prototype._findClosing = function() {
      var f;
      if (f = this._findClosingPos()) {
        this.content = this.codewave.editor.textSubstr(this.pos + this.str.length, f.pos).replace(/^\n/m, '').replace(/\n$/m, '');
        return this.str = this.codewave.editor.textSubstr(this.pos, f.pos + f.str.length);
      }
    };

    CmdInstance.prototype._findClosingPos = function() {
      var closing, f, opening;
      if (this.closingPos != null) {
        return this.closingPos;
      }
      closing = this.codewave.brakets + this.codewave.closeChar + this.cmdName + this.codewave.brakets;
      opening = this.codewave.brakets + this.cmdName;
      if (f = this.codewave.findMatchingPair(this.pos + this.str.length, opening, closing)) {
        return this.closingPos = f;
      }
    };

    CmdInstance.prototype._checkBox = function() {
      var cl, cr, endPos;
      cl = this.codewave.wrapCommentLeft();
      cr = this.codewave.wrapCommentRight();
      endPos = this.getEndPos() + cr.length;
      if (this.codewave.editor.textSubstr(this.pos - cl.length, this.pos) === cl && this.codewave.editor.textSubstr(this.getEndPos(), endPos) === cr) {
        console.log(this.pos - cl.length);
        this.pos = this.pos - cl.length;
        this.str = this.codewave.editor.textSubstr(this.pos, endPos);
        return this._removeCommentFromContent();
      }
    };

    CmdInstance.prototype._removeCommentFromContent = function() {
      var ecl, ecr, ed, re1, re2, re3;
      if (this.content) {
        ecl = Codewave.util.escapeRegExp(this.codewave.wrapCommentLeft());
        ecr = Codewave.util.escapeRegExp(this.codewave.wrapCommentRight());
        ed = Codewave.util.escapeRegExp(this.codewave.deco);
        console.log("^\\s*" + ecl + "(?:" + ed + ")+\\s*(.*?)\\s*(?:" + ed + ")+" + ecr + "$");
        re1 = new RegExp("^\\s*" + ecl + "(?:" + ed + ")+\\s*(.*?)\\s*(?:" + ed + ")+" + ecr + "$", "gm");
        re2 = new RegExp("^(?:" + ed + ")*" + ecr + "\n", "");
        re3 = new RegExp("\n\\s*" + ecl + "(?:" + ed + ")*$", "");
        return this.content = this.content.replace(re1, '$1').replace(re2, '').replace(re3, '');
      }
    };

    CmdInstance.prototype._getCmd = function() {
      var cmd;
      cmd = this.codewave.getCmd(this.cmdName);
      if (typeof cmd === "function") {
        return cmd = new cmd(this);
      } else {
        return cmd;
      }
    };

    CmdInstance.prototype._removeBracket = function(str) {
      return str.substring(this.codewave.brakets.length, str.length - this.codewave.brakets.length);
    };

    CmdInstance.prototype.getParam = function(names, def) {
      var n, _i, _len;
      if (typeof names === 'string') {
        names = [names];
      }
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        n = names[_i];
        if (this.named[n] != null) {
          return this.named[n];
        }
        if (this.params[n] != null) {
          return this.params[n];
        }
      }
      return def;
    };

    CmdInstance.prototype.execute = function() {
      var r;
      if (this.cmd != null) {
        if (this.cmd.execute != null) {
          return this.cmd.execute(this);
        } else if ((r = this.result()) != null) {
          return this.replaceWith(r);
        }
      }
    };

    CmdInstance.prototype.result = function() {
      if (this.cmd.result != null) {
        if (typeof this.cmd.result === "function") {
          return this.cmd.result();
        } else {
          return this.cmd.result;
        }
      }
    };

    CmdInstance.prototype.getEndPos = function() {
      return this.pos + this.str.length;
    };

    CmdInstance.prototype.getIndent = function() {
      return this.pos - this.codewave.findLineStart(this.pos);
    };

    CmdInstance.prototype.applyIndent = function(text) {
      return text.replace(/\n/g, "\n" + Array(this.getIndent() + 1).join(" "));
    };

    CmdInstance.prototype.replaceWith = function(text) {
      text = this.applyIndent(text);
      this.codewave.editor.spliceText(this.pos, this.getEndPos(), text);
      return this.codewave.editor.setCursorPos(this.pos + text.length);
    };

    return CmdInstance;

  })();

}).call(this);

//# sourceMappingURL=cmd_instance.js.map
