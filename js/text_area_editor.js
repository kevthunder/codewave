// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Codewave.DomKeyListener = (function() {
    function DomKeyListener() {}

    DomKeyListener.prototype.startListening = function(target) {
      target.onkeydown = (function(_this) {
        return function(e) {
          if (e.keyCode === 69 && e.ctrlKey) {
            e.preventDefault();
            if (_this.onActivationKey != null) {
              return _this.onActivationKey();
            }
          }
        };
      })(this);
      target.onkeyup = (function(_this) {
        return function(e) {
          if (_this.onAnyChange != null) {
            return _this.onAnyChange(e);
          }
        };
      })(this);
      return target.onkeypress = (function(_this) {
        return function(e) {
          if (_this.onAnyChange != null) {
            return _this.onAnyChange(e);
          }
        };
      })(this);
    };

    return DomKeyListener;

  })();

  this.Codewave.TextAreaEditor = (function(_super) {
    __extends(TextAreaEditor, _super);

    function TextAreaEditor(target) {
      this.target = target;
      this.obj = document.getElementById(this.target);
    }

    TextAreaEditor.prototype.bindedTo = function(codewave) {
      this.onActivationKey = function() {
        return codewave.onActivationKey();
      };
      return this.startListening(document);
    };

    TextAreaEditor.prototype.startListening = Codewave.DomKeyListener.prototype.startListening;

    TextAreaEditor.prototype.selectionPropExists = function() {
      return "selectionStart" in this.obj;
    };

    TextAreaEditor.prototype.hasFocus = function() {
      return document.activeElement === this.obj;
    };

    TextAreaEditor.prototype.text = function(val) {
      if (val != null) {
        this.obj.value = val;
      }
      return this.obj.value;
    };

    TextAreaEditor.prototype.getCursorPos = function() {
      if (this.tmpCursorPos != null) {
        return this.tmpCursorPos;
      }
      if (this.hasFocus) {
        if (this.selectionPropExists) {
          return {
            start: this.obj.selectionStart,
            end: this.obj.selectionEnd
          };
        } else {
          return this.getCursorPosFallback();
        }
      }
    };

    TextAreaEditor.prototype.getCursorPosFallback = function() {
      var len, pos, rng, sel;
      if (this.obj.createTextRange) {
        sel = document.selection.createRange();
        if (sel.parentElement() === this.obj) {
          rng = this.obj.createTextRange();
          rng.moveToBookmark(sel.getBookmark());
          len = 0;
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            len++;
            rng.moveEnd("character", -1);
          }
          rng.setEndPoint("StartToStart", this.obj.createTextRange());
          pos = {
            start: 0,
            end: len
          };
          while (rng.compareEndPoints("EndToStart", rng) > 0) {
            pos.start++;
            pos.end++;
            rng.moveEnd("character", -1);
          }
          return pos;
        }
      }
    };

    TextAreaEditor.prototype.setCursorPos = function(start, end) {
      if (arguments.length < 2) {
        end = start;
      }
      if (this.selectionPropExists) {
        this.tmpCursorPos = {
          start: start,
          end: end
        };
        this.obj.selectionStart = start;
        this.obj.selectionEnd = end;
        setTimeout(((function(_this) {
          return function() {
            _this.tmpCursorPos = null;
            _this.obj.selectionStart = start;
            return _this.obj.selectionEnd = end;
          };
        })(this)), 1);
      } else {
        this.setCursorPosFallback(start, end);
      }
    };

    TextAreaEditor.prototype.setCursorPosFallback = function(start, end) {
      var rng;
      if (this.obj.createTextRange) {
        rng = this.obj.createTextRange();
        rng.moveStart("character", start);
        rng.collapse();
        rng.moveEnd("character", end - start);
        return rng.select();
      }
    };

    return TextAreaEditor;

  })(Codewave.TextParser);

}).call(this);

//# sourceMappingURL=text_area_editor.js.map
